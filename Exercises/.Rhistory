my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
xleft = xleft - 0.5 * input$scale*(xright-xleft)
xright = xright + 0.5 * input$scale*(xright-xleft)
ybottom = ybottom - 0.5 * input$scale*(ytop-ybottom)
ytop = ytop + 0.5 * input$scale*(ytop-ybottom)
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
runApp('02_Snorro_A.R')
lim$usr
c(lim$usr[2]-lim$usr[3])
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=-1,max=1,value=0.3,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = (lim$usr[2]-lim$usr[1])/2 - 0.5*input$scale*lim$usr[2]-lim$usr[1]
xright = (lim$usr[2]-lim$usr[1])/2 + 0.5*input$scale*lim$usr[2]-lim$usr[1]    ybottom = ybottom - 0.5 * input$scale*(ytop-ybottom)
#ytop = ytop + 0.5 * input$scale*(ytop-ybottom)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=-1,max=1,value=0.3,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = (lim$usr[2]-lim$usr[1])/2 - 0.5*input$scale*lim$usr[2]-lim$usr[1]
xright = (lim$usr[2]-lim$usr[1])/2 + 0.5*input$scale*lim$usr[2]-lim$usr[1]
#ybottom = ybottom - 0.5 * input$scale*(ytop-ybottom)
#ytop = ytop + 0.5 * input$scale*(ytop-ybottom)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
(lim$usr[2]-lim$usr[1])/2
(lim$usr[2]-lim$usr[1])
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=-1,max=1,value=0.3,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = (lim$usr[2]-lim$usr[1])/2 - 0.5*input$scale*(lim$usr[2]-lim$usr[1])
xright = (lim$usr[2]-lim$usr[1])/2 + 0.5*input$scale*(lim$usr[2]-lim$usr[1])
#ybottom = ybottom - 0.5 * input$scale*(ytop-ybottom)
#ytop = ytop + 0.5 * input$scale*(ytop-ybottom)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
(lim$usr[2]-lim$usr[1])
(lim$usr[2]-lim$usr[1])/2
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=-1,max=1,value=0.3,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])/2 - 0.5*input$scale*(lim$usr[2]-lim$usr[1])
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])/2 + 0.5*input$scale*(lim$usr[2]-lim$usr[1])
#ybottom = ybottom - 0.5 * input$scale*(ytop-ybottom)
#ytop = ytop + 0.5 * input$scale*(ytop-ybottom)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=-1,max=1,value=0.3,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*input$scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])/2 + 0.5*input$scale*(lim$usr[2]-lim$usr[1])
#ybottom = ybottom - 0.5 * input$scale*(ytop-ybottom)
#ytop = ytop + 0.5 * input$scale*(ytop-ybottom)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=0,max=1,value=1,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*input$scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*input$scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*input$scale)
ytop = lim$usr[3] + (lim$usr[3]-lim$usr[3])*(0.5+0.5*input$scale)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=0,max=1,value=0.5,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*input$scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*input$scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*input$scale)
ytop = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5+0.5*input$scale)
xleft = xleft - input$x
ybottom = ybottom - input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=0,max=1,value=0.5,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*input$scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*input$scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*input$scale)
ytop = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5+0.5*input$scale)
xleft = xleft + input$x
ybottom = ybottom + input$y
xright = xright - input$x
ytop = ytop - input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=0,max=1,value=0.5,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*input$scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*input$scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*input$scale)
ytop = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5+0.5*input$scale)
xleft = xleft + input$x
ybottom = ybottom + input$y
xright = xright + input$x
ytop = ytop + input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Oh no! Freek has lost his moustache. We need to build an app that puts the
# moustache back in its place.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=0,max=1,value=0.5,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
my_image=readPNG("www/Freek.png")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*input$scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*input$scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*input$scale)
ytop = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5+0.5*input$scale)
xleft = xleft + input$x
ybottom = ybottom + input$y
xright = xright + input$x
ytop = ytop + input$y
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Oh no! Freek has lost his moustache. run the ap to see where it has end up.
# We need to build an app that puts the moustache back in the correct place.
# For this to work, you require the png package first.
library(shiny)
library(png)
ui <- fluidPage(
sliderInput('scale','Scale:',min=0,max=1,value=0.5,step=0.01),
sliderInput('x','x:',min=-1,max=1,value=0,step=0.01),
sliderInput('y','y:',min=-1,max=1,value=0,step=0.01),
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
# Add Freek to the plot.
my_image=readPNG("www/Freek.png")
plot(1:2, type='n', main="", xlab="x", ylab="y")
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
scale = input$scale
x_delta = input$x
y_delta = input$y
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*scale)
ytop = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5+0.5*scale)
xleft = xleft + x_delta
ybottom = ybottom + y_delta
xright = xright + x_delta
ytop = ytop + y_delta
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
# Oh no! Freek has lost his moustache. run the ap to see where it has end up.
# We need to build an app that puts the moustache back in the correct place.
# For this to work, you require the png package first.
library(shiny)
library(png)
ui <- fluidPage(
# Add a slider for the scale, between 0 and 1.
# Add a slider for the x displacement, between 0 and 1.
# Add a slider for the y displacement, between 0 and 1.
plotOutput('myplot',width = 500,height=500)
)
# The server function
server <- function(input,output)
{
output$myplot <- renderPlot({
# Add Freek to the plot.
my_image=readPNG("www/Freek.png")
plot(1:2, type='n', main="", xlab="x", ylab="y")
lim <- par()
rasterImage(my_image, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
my_image=readPNG("www/moustache.png")
xleft = lim$usr[1]
ybottom = lim$usr[3]
xright = lim$usr[2]
ytop = lim$usr[4]
scale = 1
x_delta = 0
y_delta = 0
xleft = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5-0.5*scale)
xright = lim$usr[1] + (lim$usr[2]-lim$usr[1])*(0.5+0.5*scale)
ybottom = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5-0.5*scale)
ytop = lim$usr[3] + (lim$usr[4]-lim$usr[3])*(0.5+0.5*scale)
xleft = xleft + x_delta
ybottom = ybottom + y_delta
xright = xright + x_delta
ytop = ytop + y_delta
rasterImage(my_image, xleft, ybottom, xright, ytop)
grid()
})
}
shinyApp(ui, server)
runApp('02_Snorro.R')
runApp('02_Snorro.R')
