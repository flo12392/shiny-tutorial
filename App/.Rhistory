# The server function
server <- function(input,output)
{
# Render the text object
output$text <- renderText({paste0('X * 2 = ', as.numeric(input$select)*2})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', as.numeric(input$select)*2 + 1))})
}
shinyApp(ui, server)
library(shiny)
# The user interface
ui <- fluidPage(
# Ask the user for input
selectInput('select','X = ',choices=seq(1,10)),
# Output the rendered text object
textOutput('text'),
textOutput('text2')
)
# The server function
server <- function(input,output)
{
# Render the text object
output$text <- renderText({paste0('X * 2 = ', as.numeric(input$select)*2)})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', as.numeric(input$select)*2 + 1))})
}
shinyApp(ui, server)
library(shiny)
# The user interface
ui <- fluidPage(
# Ask the user for input
selectInput('select','X = ',choices=seq(1,10)),
# Output the rendered text object
textOutput('text'),
textOutput('text2')
)
# The server function
server <- function(input,output)
{
# Render the text object
output$text <- renderText({paste0('X * 2 = ', as.numeric(input$select)*2)})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', as.numeric(input$select)*2 + 1)})
}
shinyApp(ui, server)
runApp()
library(shiny)
# The user interface
ui <- fluidPage(
# Ask the user for input
selectInput('select','X = ',choices=seq(1,10)),
# Output the rendered text object
textOutput('text'),
textOutput('text2')
)
# The server function
server <- function(input,output)
{
val <- reactive({as.numeric(input$select)*2})
# Render the text object
output$text <- renderText({paste0('X * 2 = ', val() )})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', val() )})
}
shinyApp(ui, server)
library(shiny)
# The user interface
ui <- fluidPage(
# Ask the user for input
numericInput('x','X = ',min=1,max=10,step=1),
# Output the rendered text object
textOutput('text'),
textOutput('text2')
)
# The server function
server <- function(input,output)
{
# Render the text object
output$text <- renderText({paste0('X * 2 = ', input$x * 2 )})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', input$x * 2 + 1 )})
}
shinyApp(ui, server)
library(shiny)
# The user interface
ui <- fluidPage(
# Ask the user for input
numericInput('x','X = ',min=1,max=10,step=1,value=1),
# Output the rendered text object
textOutput('text'),
textOutput('text2')
)
# The server function
server <- function(input,output)
{
# Render the text object
output$text <- renderText({paste0('X * 2 = ', input$x * 2 )})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', input$x * 2 + 1 )})
}
shinyApp(ui, server)
library(shiny)
# The user interface
ui <- fluidPage(
# Ask the user for input
numericInput('x','X = ',min=1,max=10,step=1,value=1),
# Output the rendered text object
textOutput('text'),
textOutput('text2')
)
# The server function
server <- function(input,output)
{
val <- reactive({input$x * 2})
# Render the text object
output$text <- renderText({paste0('X * 2 = ', val() )})
# Render the second text object
output$text2 <- renderText({paste0('X * 2 + 1 = ', val() + 1 )})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
numericInput('x1','X1 = ',min=1,max=10,step=1,value=1),
numericInput('x2','X2 = ',min=1,max=10,step=1,value=1),
textOutput('text')
)
# The server function
server <- function(input,output)
{
output$text <- renderText({
isolate(x1 <- input$x1)
x2 <- input$x2
paste0('X1 + X2 = ', x1 + x2 )})
}
shinyApp(ui, server)
server <- function(input, output, session)
{
observeEvent(input$btn_next,
{
selected = as.numeric(gsub("[^\\d]+", "", input$sidebar, perl=TRUE))
updateTabItems(session, 'sidebar', paste0('panel',selected+1))
})
observeEvent(input$btn_prev,
{
selected = as.numeric(gsub("[^\\d]+", "", input$sidebar, perl=TRUE))
updateTabItems(session, 'sidebar', paste0('panel',selected-1))
})
# Panel 4 -------------------------------------------
# Render the text object
output$p4_text <- renderText({paste0('You picked: ', input$p4_select)})
# Panel 5 -------------------------------------------
p5_val <- reactive({input$p5_x * 2})
# Render the text object
output$p5_text <- renderText({paste0('X * 2 = ', p5_val() )})
# Render the second text object
output$p5_text2 <- renderText({paste0('X * 2 + 1 = ', p5_val() + 1 )})
# Panel 6 -------------------------------------------
output$p6_text <- renderText({
isolate(x1 <- input$p6_x1)
x2 <- input$p6_x2
paste0('X1 + X2 = ', x1 + x2 )})
}
runApp()
runApp()
help("modalDialog")
runApp()
runApp()
dashboardPage(
dashboardHeader(title='Shiny demo'),
dashboardSidebar(
sidebarMenu(id='sidebar',
div(style='display:block;margin-left: auto;margin-right: auto;',
div(style="display:inline-block",actionButton('btn_prev','Prev')),
div(style="display:inline-block",actionButton('btn_next','Next'))
),
menuItem('App components', tabName = 'panel1', icon = icon('chart')),
menuItem('UI Components', tabName = 'panel2', icon = icon('chart')),
menuItem('Server Components', tabName = 'panel3', icon = icon('chart')),
menuItem('An example', tabName = 'panel4', icon = icon('chart')),
menuItem('Reactive conductors', tabName = 'panel5', icon = icon('chart')),
menuItem('Isolate', tabName = 'panel6', icon = icon('chart')),
menuItem('observeEvent and reactiveValues', tabName = 'panel7', icon = icon('chart'))
)
),
dashboardBody(
tags$head(
tags$style(HTML("hr {border-top: 1px solid #000000;}"))
),
tabItems(
# First tab content
tabItem(tabName = "panel1",
fluidRow(
column(width=12,
includeMarkdown('markdown/app_components.md')
)
)
),
tabItem(tabName = "panel2",
fluidRow(
column(width=12,
includeMarkdown('markdown/UI_components.md')
)
)
),
tabItem(tabName = "panel3",
fluidRow(
column(width=12,
includeMarkdown('markdown/server_components.md')
)
)
),
tabItem(tabName = "panel4",
fluidRow(
column(width=12,
includeMarkdown('markdown/app_example.md')
)
),
hr(),
fluidRow(
column(width=12,
# Ask the user for input
selectInput('p4_select','Pick one:',choices=LETTERS[1:10]),
# Output the rendered text object
textOutput('p4_text')
)
)
),
tabItem(tabName = "panel5",
fluidRow(
column(width=12,
hr(),
includeMarkdown('markdown/reactive_conductors_1.md'),
numericInput('p5_x','X = ',min=1,max=10,step=1,value=1),
# Output the rendered text object
textOutput('p5_text'),
textOutput('p5_text2'),
hr(),
includeMarkdown('markdown/reactive_conductors_2.md')
)
)
),
tabItem(tabName = "panel6",
fluidRow(
column(width=12,
includeMarkdown('markdown/isolate_1.md')
)
),
hr(),
fluidRow(
column(width=12,
numericInput('p6_x1','X1 = ',min=1,max=10,step=1,value=1),
numericInput('p6_x2','X2 = ',min=1,max=10,step=1,value=1),
textOutput('p6_text')
)
)
),
tabItem(tabName = "panel7",
fluidRow(
column(width=12,
includeMarkdown('markdown/observeEvent_1.md')
)
),
hr(),
fluidRow(
column(width=12
)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
actionButton('btn1','Show pop-up!')
actionButton('btn2','Increment value!')
)
# The server function
server <- function(input,output)
{
# Initialize the reactiveValue
val <- reactiveVal(1)
# Observer that shows a modalDialog with the current value
observeEvent(input$btn1,
{
showModal(modalDialog(
title = "Important message",
paste0("The current value is ", val())
))
})
# Observer that increments the reactiveValue val() by 1.
observeEvent(input$btn2,
{
val(val()+1)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
actionButton('btn1','Show pop-up!'),
actionButton('btn2','Increment value!')
)
# The server function
server <- function(input,output)
{
# Initialize the reactiveValue
val <- reactiveVal(1)
# Observer that shows a modalDialog with the current value
observeEvent(input$btn1,
{
showModal(modalDialog(
title = "Important message",
paste0("The current value is ", val())
))
})
# Observer that increments the reactiveValue val() by 1.
observeEvent(input$btn2,
{
val(val()+1)
})
}
shinyApp(ui, server)
help(fluidRow)
runApp()
runApp()
runApp()
mtcars
mtcars[['cyl']]
library(shiny)
ui <- fluidPage(
selectInput('axis1','x-axis:', choices = c('mpg','cyl','disp')),
selectInput('axis2','y-axis:', choices = c('mpg','cyl','disp')),
plotOutput('plot1')
)
# The server function
server <- function(input,output)
{
output$plot1 <- renderPlot({
plot(mtcars[[input$axis1]],mtcars[[input$axis2]])
})
}
shinyApp(ui, server)
mtcars
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
ui <- fluidPage(
selectInput('mode','Mode: ', choices = c('Friendly','Hostile')),
textInput('name',inputId = 'Your name: '),
textInput('greeting',inputId = 'Your greeting: '),
actionButton('interact','Interact!')
)
# The server function
server <- function(input,output,session)
{
observeEvent(input$interact,
{
text1 = paste0(input$name,': ', input$greeting)
text2 = paste0('AZIS: ', ifelse(input$mode=='Friendly','Hello!','I do not like your face.'))
showModal(modalDialog(
title = "Advanced Zoologist Interaction Simulator",
text1,
text2
))
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
ui <- fluidPage(
selectInput('mode', 'Mode: ', choices = c('Friendly','Hostile')),
textInput('name', 'Your name: '),
textInput('greeting', 'Your greeting: '),
actionButton('interact', 'Interact!')
)
# The server function
server <- function(input,output)
{
observeEvent(input$interact,
{
text1 = paste0(input$name,': ', input$greeting)
text2 = paste0('AZIS: ', ifelse(input$mode=='Friendly','Hello!','I do not like your face.'))
showModal(modalDialog(
title = "Advanced Zoologist Interaction Simulator",
text1,
text2
))
})
}
shinyApp(ui, server)
runApp('~/GIT/shiny-tutorial/Exercises/01_artificial_intelligence_A.R')
runApp('~/GIT/shiny-tutorial/Exercises/01_artificial_intelligence_A.R')
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
ui <- fluidPage(
selectInput('mode', 'Mode: ', choices = c('Friendly','Hostile')),
textInput('name', 'Your name: '),
textInput('greeting', 'Your greeting: '),
actionButton('interact', 'Interact!')
)
# The server function
server <- function(input,output)
{
observeEvent(input$interact,
{
text1 = paste0(input$name,': ', input$greeting,'</br>')
text2 = paste0('AZIS: ', ifelse(input$mode=='Friendly','Hello!','I do not like your face.'))
showModal(modalDialog(
title = "Advanced Zoologist Interaction Simulator",
text1,
text2
))
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
ui <- fluidPage(
selectInput('mode', 'Mode: ', choices = c('Friendly','Hostile')),
textInput('name', 'Your name: '),
textInput('greeting', 'Your greeting: '),
actionButton('interact', 'Interact!')
)
# The server function
server <- function(input,output)
{
observeEvent(input$interact,
{
text1 = paste0(input$name,': ', input$greeting,'<\br>')
text2 = paste0('AZIS: ', ifelse(input$mode=='Friendly','Hello!','I do not like your face.'))
showModal(modalDialog(
title = "Advanced Zoologist Interaction Simulator",
text1,
text2
))
})
}
shinyApp(ui, server)
runApp('~/GIT/shiny-tutorial/Exercises/01_artificial_intelligence_A.R')
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
ui <- fluidPage(
selectInput('mode', 'Mode: ', choices = c('Friendly','Hostile')),
textInput('name', 'Your name: '),
textInput('greeting', 'Your greeting: '),
actionButton('interact', 'Interact!')
)
# The server function
server <- function(input,output)
{
observeEvent(input$interact,
{
text1 = paste0(input$name,': ', input$greeting)
text2 = paste0('AZIS: ', ifelse(input$mode=='Friendly','Hello!','I do not like your face.'))
finaltext = HTML(paste0(text1,'<br>',text2))
showModal(modalDialog(
title = "Advanced Zoologist Interaction Simulator",
finaltext
))
})
}
shinyApp(ui, server)
# Now we have learned the basics of Shiny. We can create Artificial Intelligence.
# In this case, we create a Advanced Zoologist Interaction Simulator (AZIS),
# To simulate the response of a Zoologist when it is greeted.
# The AZIS should have two personality options; friendly or hostile.
library(shiny)
ui <- fluidPage(
selectInput('mode', 'Mode: ', choices = c('Friendly','Hostile')),
textInput('name', 'Your name: '),
textInput('greeting', 'Your greeting: '),
actionButton('interact', 'Interact!')
)
# The server function
server <- function(input,output)
{
observeEvent(input$interact,
{
text1 = paste0(input$name,': ', input$greeting)
text2 = paste0('AZIS: ', ifelse(input$mode=='Friendly','Hello!','I do not like your face.'))
finaltext = HTML(paste0(text1,'<br>',text2))
showModal(modalDialog(
title = "Advanced Zoologist Interaction Simulator",
finaltext
))
})
}
shinyApp(ui, server)
